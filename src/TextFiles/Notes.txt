String[] st = s.split(" ");
Arrays.sort(st, (a, b) -> (int) a.charAt(a.length() - 1) - (int) b.charAt(b.length() - 1));
return Arrays.stream(st).map(str -> str.substring(0, str.length() - 1)).collect(Collectors.joining(" "));


new StringBuilder("hello").charAt(), .setCharAt(), .deleteCharAt();


String st1 = String.join("", word1);


s1,s2 stringBuilder
s1.toString().equals(s2.toString());

public String toLowerCase(String str) {
        char[] a = str.toCharArray();
        for (int i = 0; i < a.length; i++)
            if ('A' <= a[i] && a[i] <= 'Z')
                a[i] = (char) (a[i] - 'A' + 'a');
        return new String(a);
    }

if(c >='a' && c<='z') c = c-'a' + 'A';
else if(c>='A' && c<='Z') c = c-'A' + 'a';


String str = "testString";
char[] charArray = str.toCharArray();
Character[] charObjectArray = ArrayUtils.toObject(charArray);

Character[] charObjectArray =
    str.chars().mapToObj(c -> (char)c).toArray(Character[]::new);


"     ".chars().mapToObj(c -> (char) c).toArray(Character[]::new);
int U = Collections.frequency(List.of(array), 'U');

public String convertToTitle(int columnNumber) {
        StringBuilder sb = new StringBuilder();
        int reminder = 0;
        while (columnNumber > 0) {
            if (columnNumber % 26 == 0) {
                reminder = 26;
                columnNumber--;
            } else {
                reminder = columnNumber % 26;
            }
            sb.append((char) ('A' + reminder - 1));
            columnNumber /= 26;
        }
        return sb.reverse().toString();
    }


" ".contentEquals(new StringBuilder());


Character.isLetterOrDigit(ch)
Character.isDigit(s.charAt(i)


Deque<Character> stack = new ArrayDeque<>(); in java

int j = (int) Math.sqrt(c);

Map<Character, Integer> map =
        Map.of(
            'I', 1,
            'V', 5)



 Queue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
 PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
 for (int i = 0; i < pq.size(); i++)
		{
            System.out.println("peeking " + Arrays.toString(pq.peek()));
            pq.poll();
        }
        System.out.println();


 Pairs in java, nothing but create a class to store two values vai constructor



problem 1552 :
This problem is based upon Aggressive Cows problem.
Similar questions on LEETCODE are :

Ques. No. 1552
Ques. No. 1870
Ques. No. 875
Ques. No. 1283
Ques. No. 1482
Ques. No. 2064
-----------------------------------------------------
If you haven't solved it all yet, here's the list to practice (for future readers!)
BS special case: LC Study Guide: Binary Search on Answer : https://leetcode.com/discuss/study-guide/3444552/binary-search-on-answer-template-generic-template
Must do to master the binary search on answer:

https://leetcode.com/problems/minimum-time-to-repair-cars/ <-- this one is gold!!!
https://leetcode.com/problems/minimum-speed-to-arrive-on-time/
https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/
https://leetcode.com/problems/koko-eating-bananas/
https://leetcode.com/problems/maximum-candies-allocated-to-k-children/
https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/
https://leetcode.com/problems/sell-diminishing-valued-colored-balls/
https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/
https://leetcode.com/problems/divide-chocolate/ <-- this one is gold!!! (hard)




by the way, 1E6 means 1 times 10 to the power 6, which is 1.000.000, not 100.000.
2E8 means 2 times 10 to the power 8, or 200.000.000 (two hundred million).
It's simple: 1E6 = 1 followed by 6 zeroes; 2E8 = 2 followed by 8 zeroes.
double v = 1E6;
int end = (int) 1E6;


public static int intCeil(int a, int b)
	{
      if (a % b != 0) {
        return (a / b) + 1;
      } else {
        return (a / b);
      }
    }
OR double result = Math.ceil(number);



Arrays.setAll(nums, i -> ((nums[i] & 1) == 1) ? 1 : 0);


HashMap<Integer, Integer> map = new HashMap<>();
count += map.getOrDefault(key, 0);


Not synchronized: By default, the ArrayDeque class
is not synchronized, which means that multiple threads can access it simultaneously, leading to potential data corruption.

Features:
Array deques have no capacity restrictions and they grow as necessary to support usage.
They are not thread-safe which means that in the absence of external synchronization,
ArrayDeque does not support concurrent access by multiple threads.
Null elements are prohibited in the ArrayDeque.
ArrayDeque class is likely to be faster than Stack when used as a stack.
ArrayDeque class is likely to be faster than LinkedList when used as a queue.


for (int i = 0; i < ceil; i++) sb.append(a);
        sb.append(a.repeat(Math.max(0, ceil)));


char[] arr = String.valueOf(n).toCharArray();
Arrays.sort(arr, i + 1, arr.length);

=========================================================================================================================================

PEMDAS: Parenthesis -> Exponents -> Multiplication and Division (left to right) -> Addition and Subtraction (left to right).
BODMAS: Brackets -> Divison-> Multiplication -> Addition -> Substraction.

+ Addition
- Subtraction
* Multiplication
/ Division
^ Exponents (2^5 is 2 raised to the power of 5)
r Roots (2r3 is the 3rd root of 2)
() [] {} Brackets or Grouping



public int countHomogenous(String s) {
        long count = 1;
        long sum = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            }else {
                count = 1;
            }
            sum += count;
        }
        return  (int) (sum % 1_000_000_007);
    }


" T   "stripTrailing();

		int[] arr	= {5, 2, 3, 1};
List<Integer> list1	= Arrays.stream(arr).boxed().toList();
		int[] array	= list.stream().mapToInt(n -> n).toArray();


class {
	public static void main(args[] str){

		PriorityQueue<Integer> minHeap=new PriorityQueue<>();
		PriorityQueue<Integer> maxHeap=new PriorityQueue<>(Collections.reverseOrder());
		PriorityQueue<Integer> maxHeap2=new PriorityQueue<>((a, b) -> b-a);
		// if we stor maximum k values in minHeap and keep on adding values and poll if size >4
		// then it will keep on polling min values and minHeap will contain max k values in it.
	}
}


The bitCount() method of Integer class of java.lang package returns the count of set bits in a positive number.

Integer.bitCount()
Integer. ..............

===============================================================
& is AND Operation (1 AND 1 is 1, 1 AND 0 is 0, 0 AND 0 is 0)
     num & 1 == 1 meaning odd, == 0 meaning even.
     Example:
		 n = 15 or 1111. n & 0001 = 0001
		 n = 8 or 1000. n & 0001 = 0000

^ is XOR Operation (1 OR 1 is 0, 1 OR 0 is 1, 0 OR 0 is 0)
     num ^ 1 is num - 1 if num is odd, or num + 1 if num is even.
     We only use num ^ 1 when num is odd.
     Example:
	 	n = 15 or 1111.		n ^ 0001 = 1110 (14)
	 	n = 8 or 1000.		n ^ 0001 = 1001 (9)


>> is SHIFT RIGHT Operation, the number is the number of bits moved (moving the whole binary one bit right).
     num >> 1 is num / 2 if num is even. If num is odd, then is (num - 1) / 2.
     Example:
		 n = 15 or 1111. n >> 1 = 0111 (7)
		 n = 8 or 1000. n >> 1 = 0100 (4)

Hence :
while (num > 0) {
            num = (num & 1) == 1 ? num ^ 1 : num >> 1;
            count++;
        }
===============================================================
private static void printSubsets(String op, String ip) {
        if (ip.isEmpty()) {
            list.add(op); return;
        }
        printSubsets(op, 				ip.substring(1));
        printSubsets(op+ip.charAt(0),	ip.substring(1));
    }

========================
Kadane's Algorithm :

I spent some time convincing myself about why we need to reset to zero. By reseting maxCur to 0,
 essentially it means that we have found a point i where the price[i] is lower than the time we bought,
 and that we should then try to buy at point i to see if we can achieve a bigger gain.
 Because maxCur is recording the difference, the difference between price[i] and itself should be 0.


Fantastic Explanation! Plus my own understanding, the recording of the sum of
differences is to eliminate the fluctuations in the middle. So if maxCur is negative,
then a cheaper price must have been encountered.


// compare two very big integer using lexography of String, no need to use number container
private static String compare(String s1, char[] arr) {
        String s2 = String.valueOf(arr);
        return s1.compareTo(s2) > 0 ? s1 : s2;
    }

============================================================
 int n = "(ed(et(oc))el)".length();
        StringBuilder result = new StringBuilder();
        int direction = 1; // Left to Right
        for (int i = 0; i < n; i += direction) {
            if (s.charAt(i) == '(' || s.charAt(i) == ')') {
                i = door[i];
                direction = -direction;
            } else {
                result.append(s.charAt(i));
            }
        }
============================================================


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


public static int getFirstSetBitPos(int n)
    {
        return (int)((Math.log10(n & -n)) / Math.log10(2))
            + 1;
    }

============================================================
System.out.println(addBinary2("100", "110010"));

public static String addBinary2(String a, String b) {
        StringBuilder sb = new StringBuilder();
        int carry = 0, base = 2;
        int p1 = a.length() - 1;
        int p2 = b.length() - 1;
        while (p1 >= 0 || p2 >= 0 || carry == 1) {
            int n1 = p1 >= 0 ? a.charAt(p1--) - '0' : 0;
            int n2 = p2 >= 0 ? b.charAt(p2--) - '0' : 0;
            int sum = n1 + n2 + carry;
            sb.append(sum % base);
            carry = sum / base;
        }
        return sb.reverse().toString();
    }
============================================================

   while (p1 >= 0 || p2 >= 0) {
            int n1 = p1 >= 0 ? a.charAt(p1--) - '0' : 0;
            int n2 = p2 >= 0 ? b.charAt(p2--) - '0' : 0;


#
TimeUnit.SECONDS.sleep(1);

to create 1111 with length 4
int mask = (1 << length) - 1; => 10000 - 1 => 1111

=========================Records in JAVA===================================
public record data1(String key, Integer value) {}
public record data2<K, V>(K key, V value) {}

* whole purpose is to hold data in itself, data will be immutable.

* defines the variable as final and nonstatic, takes from record creation itself.

* it automatically creates a defualt constructor with given values in record creation paramaeter
	and thic constuctor is called colonical constructor.

* Record has defaut variable as final so it does not want them to be used by other classes as a
	relation hence it is final and doesn't let anyone extend it.

* we can have our static and nonstatic method inside it and later can be used.

* we can also define our feild, but guess what: non static wouldnt be allower as in record all
	nonstatic are created as record creation time and they are final as they can not be changed.

* these classes implicitly extends Record class hence another one(multiple inheritence) by us is
	not possible but we can obviously implements interfaces.

* We can create our own constructor but it has to follow the given fields and order of fields that
	were there while record was created with theri assignment to record variables.

* Unique : Here inside record we can create a method without any paranthesis as a constructor as
	compiler knows it will has same parameter field and even done need to intialize our variable,
	compiler we do that for us
	public record {
		if(value < 0) throw exception;
	}


=========================Generic Method in JAVA===================================

Creating a Generic Method in Java
The angle bracket syntax is required to declare a type parameter when writing a generic method in Java.
A placeholder for the real type that will be supplied to the method at runtime is the type argument.

Syntax for Declaring a Generic Method:
public <T> void methodName(T parameter) {
    // method implementation
}

public static <T, U> boolean isEqual(T arg1, U arg2) {
    return arg1.equals(arg2);
}

	isEqual(10, 10) 			// true
    isEqual("hello", "world") 	// false
    isEqual(3.14, 3.14) 		// true
public static <T> boolean isEqual(T obj1, T obj2) {
        return obj1.equals(obj2);
}

we can define a generic method that only works with objects that implement the Comparable interface,
which provides a way to compare objects of the same type. Here is an example:
public static void main(String[] args) {
        System.out.println(isGreaterThan(10, 5)); // true
        System.out.println(isGreaterThan("hello", "world")); // false
        System.out.println(isGreaterThan(3.14, 2.5)); // true
    }
    public static <T extends Comparable<T>> boolean isGreaterThan(T arg1, T arg2) {
        return arg1.compareTo(arg2) > 0;
    }

==================================================================================

if		num[i]				= arr[i] XOR arr[i+1]
then	num[i] XOR arr[i]	= arr[i+1]

if		a		= b XOR c
then	a XOR c	= b
==================================================================================

final boolean sign = dividend > 0 ^ divisor > 0;

==================================================================================

		String[] names = {"Java", "Node", "JavaScript", "Rust", "Go"};
        List<String> collect = IntStream.range(0, names.length)
                                        .mapToObj(index -> index + ":" + names[index])
                                        .collect(Collectors.toList());
        collect.forEach(System.out::println);

IntStream.range(0, obj.dp.length)
                 .mapToObj(index -> index + ":" + obj.dp[index])
                 .forEach(System.out::println);


==================================================================================
public static void main(String[] args) {
        HashMap map = new HashMap<>();

        map.merge("A", 1, Integer::sum); // Inserts new entry with key "A" and value 1
        //map -> {"A": 1}

        map.merge("A", 2, Integer::sum);
        // Inserts new entry with key "A" and value 2, but since key "A" already exist it will merge the value
		// with previous one hence 1 + 2 = 3
        //map -> {"A": 3}

        System.out.println(map);
		//{A=3}
    }


Explanation:

In this example, the merge() method is used to insert an entry with key "A" and value 1 into the map,
then it insert another entry with key "A" and value 2. Since key "A" already present in the map,
the function Integer::sum is used to compute the new value for the key.
it will merge the value by adding the existing value (1) and the new value (2) , the new value is 3.

Hence :

		String[] arr = {"a", "b", "a", "a", "b", "a"};

		HashMap<String, Integer> map = new HashMap<>();

		for (String s : arr) {
            map.merge(s, 1, Integer::sum);
        }

        System.out.println("map = " + map);
		//map = {a=4, b=2}

==================================================================================

1900 is not a leap year but 1600 is a leap year!!!
private boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
    }


==================================================================================
		int mul = num.stream().reduce(1, (a, b) -> a * b); // Multiply all elements together

		System.out.println("Multiplication of Elements : " + mul);

		int sum = num.stream().reduce(0, (a, b) -> a + b); // Sum all elements

		System.out.println("Sum of Elements : " + sum);

==================================================================================
return Arrays.stream(grid)
                     .map(int[]::clone)
                     .toArray(int[][]::new);

==================================================================================
    private static final AtomicInteger uniqueId = new AtomicInteger(0);
	int value = uniqueId.incrementAndGet();

==================================================================================
# if an list of variable is needs to be created in all the objects of our class
then we can atleast declare that variable at class level and initalize each time a new
instance of that class created, though this signle reference variable will be used each time and
will result in lower storage.

static List<List<Integer>> list;
function {list = new ArrayList<>();}

# when setting some an object to some value always create a fresh one to save:
list.add(new ArrayList<>(temp));



==================================================================================
for given LinkedList = [1,1,0,0,1]
convert to decimal (ans = 25)

		int num = 0;
        while(temp != null){
            num = (num * 2) + temp.val;
            temp = temp.next;
        }
        return num;

==================================================================================

public int getDecimalValue4(ListNode head) {
        int num = 0;
        for (; head != null; head = head.next)
            num = (num << 1) + head.val;
        return num;
    }

==================================================================================
        Stack<Integer> stack = new Stack<>();
		stack.add(temp.val);
		int val = stack.pop();

		List<Integer> stack = new Stack<>();
		stack.add(temp.val);
		int val = stack.getLast();
        stack.removeLast();

==================================================================================
Debugging your code during a coding interview can be a nightmare situation.

Debugging is hard enough as is, and is 10x as hard when there is an interviewer breathing
down your neck. After solving > 1600 Leetcode problems I would recommend these tips:

1) "defensive print debugging". As soon as you start to write code, start inserting print statements.
For instance say we create an array that contains certain elements. After creating it, print it
and run your code to check that the values match with what you expect.

Dont wait to write your entire solution before you run any code! If you have mistakes,
its going to be so much harder to debug. You should diagnose problems and debug as you go.

2) Use clear debug prints. Dont just write "print(arr)".
If you fill your code with print statements like this,
it becomes less clear what console outputs refer to what variables.
Label everything: print(f'array={arr}')

==================================================================================
	public ListNode reverseList(ListNode head) {
        if (head.next == null) return head;

        ListNode newHead = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
    }

==================================================================================
public ListNode rotateRight2(ListNode head, int k) {
        if(head == null || head.next == null) return head;

        int length = 1;
        ListNode curr = head;
        // get till the tail of list also find length of array
        while (curr.next != null) {
            curr = curr.next;
            length++;
        }
        if(k % length == 0) return head;
        curr.next = head;

        // now shift our head node till previous node of our new node
        int diff = length - (k % length);
        for (int i = 1; i < diff; i++) {
            head = head.next;
        }
        ListNode newHead = head.next;
        head.next = null;
        return newHead;
    }

==================================================================================

//https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html
-ArrayDequeue methods :
{

The twelve methods described above are summarized in the following table:

Summary of Deque methods
First Element (Head)	Last Element (Tail)
Throws exception	Special value	Throws exception	Special value
Insert	addFirst(e)	offerFirst(e)	addLast(e)	offerLast(e)
Remove	removeFirst()	pollFirst()	removeLast()	pollLast()
Examine	getFirst()	peekFirst()	getLast()	peekLast()
This interface extends the Queue interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results.
Elements are added at the end of the deque and removed from the beginning.
The methods inherited from the Queue interface are precisely equivalent to Deque methods as indicated in the following table:

Comparison of Queue and Deque methods

Queue Method	Equivalent Deque Method
add(e)			addLast(e)
offer(e)		offerLast(e)
remove()		removeFirst()
poll()			pollFirst()
element()		getFirst()
peek()			peekFirst()



Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy Stack class.
When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to Deque methods as indicated in the table below:

Comparison of Stack and Deque methods

Stack Method	Equivalent Deque Method
push(e)			addFirst(e)
pop()			removeFirst()
peek()			peekFirst()

Note that the peek method works equally well when a deque is used as a queue or a stack; in either case, elements are drawn from the beginning of the deque.
This interface provides two methods to remove interior elements, removeFirstOccurrence and removeLastOccurrence.
Unlike the List interface, this interface does not provide support for indexed access to elements.
While Deque implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so.
Users of any Deque implementations that do allow null elements are strongly encouraged not to take advantage of the ability to insert nulls.
This is so because null is used as a special return value by various methods to indicated that the deque is empty.

Deque implementations generally do not define element-based versions of the equals and hashCode methods, but instead inherit the identity-based versions from class Object.

This interface is a member of the Java Collections Framework.


}


==================================================================================
Random number generation

int ans = (int)(Math.random() * length);

here Math.random() gives a double number in the range [0, 1)

==================================================================================

HashMap, Hashtable, ConcurrentHashMap performance comparison :

Below table summarizes the execution time of each data structure:

Data structure		Execution Time (secs)
HashMap				3.16
ConcurrentHashMap	4.26
Hashtable			56.27

 If you notice HashMap has the best performance, however it’s not thread-safe.
 It has a scary problem that can cause the threads to go on an infinite loop,
 which would ultimately cause the  application’s CPU to spike up.

 If you notice ConcurrentHashMap is slightly slower performing than HashMap,
 however it’s a 100% thread safe implementation.

 On the other hand Hashtable is also thread safe implementation,
 but it’s 18 times slower than HashMap for this test scenario.

==================================================================================
LRU cache :

new LinkedHashMap<Integer,String>(16, .75f, true);
With that true you specify that you want an "access-ordered" map, not an "insertion-ordered" map.
This means that you will get the values in the order of access (least recently accessed first).
Both your get and put calls constitute an "access".

A special constructor is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed,
from least-recently accessed to most-recently (access-order). This kind of map is well-suited to building LRU caches.
Invoking the put or get method results in an access to the corresponding entry (assuming it exists after the invocation completes).

==================================================================================
Equality and Hash Code: Java records handle equality and hash code calculations for you.
The equals() and hashCode() methods are automatically generated based on the fields defined in the record.
This simplifies the process of comparing records for equality and using them in data structures such as sets and maps.

==================================================================================
public boolean isPowerOfFour(int n) {
        if (n <= 0) return false;
        if (n == 1) return true;
        double p = Math.log10(n) / Math.log10(4); // Math.log10 is faster then Math.log
        return p - (int) p == 0;
    }

public boolean isPowerOfFour(int num) {
        return num > 0 && (num&(num-1)) == 0 && (num & 0x55555555) != 0;
        //0x55555555 is to get rid of those power of 2 but not power of 4
        //so that the single 1 bit always appears at the odd position
    }

@Description("Generalized method")
public boolean isPowerOfFour(int n) {
        for (int i = 0; i < 31; i++) {
            if (n == Math.pow(4, i)) return true;
        }
        return false;
    }

public boolean isPowerOfFour(int n) {
        return (n & (n - 1)) == 0 && n % 3 == 1;
}
==================================================================================
Properties of bitwise operations:
The result of a & (a−1) is to change the last 1 in the binary representation of a to 0; The result of a & (-a) (equivalent to a & (∼(a−1)))
is to keep only the last 1 of the binary representation of a, and set the remaining 1s to 0. Using these properties,
many bit operation problems can be solved strategically.

==================================================================================
Arrays List of String to array of String only

List<String> result = new ArrayList<>();

String[] array = result.toArray(new String[0]);
String[] array = result.<String>toArray(new String[0]);
String[] array = (String[]) result2.<String>toArray();

-------------------------

List<Integer> to Integer[] array

List<Integer> result2 = new ArrayList<>();
Integer[] array = (Integer[]) result2.<Integer>toArray();


==================================================================================
for (char c = '1'; c <= '9'; c++) {
}

==================================================================================


==================================================================================


==================================================================================


==================================================================================


==================================================================================


==================================================================================


==================================================================================


==================================================================================


==================================================================================

